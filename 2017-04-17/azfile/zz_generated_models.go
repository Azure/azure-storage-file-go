package azfile

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/xml"
	"io"
	"net/http"
	"strconv"
	"strings"
	"time"
)

// ETag is an entity tag.
type ETag string

const (
	// ETagNone represents an empty entity tag.
	ETagNone ETag = ""

	// ETagAny matches any entity tag.
	ETagAny ETag = "*"
)

// Metadata contains metadata key/value pairs.
type Metadata map[string]string

const mdPrefix = "x-ms-meta-"

const mdPrefixLen = len(mdPrefix)

// UnmarshalXML implements the xml.Unmarshaler interface for Metadata.
func (md *Metadata) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	tokName := ""
	for t, err := d.Token(); err == nil; t, err = d.Token() {
		switch tt := t.(type) {
		case xml.StartElement:
			tokName = strings.ToLower(tt.Name.Local)
			break
		case xml.CharData:
			if *md == nil {
				*md = Metadata{}
			}
			(*md)[tokName] = string(tt)
			break
		}
	}
	return nil
}

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// CopyStatusType enumerates the values for copy status type.
type CopyStatusType string

const (
	// CopyStatusAborted ...
	CopyStatusAborted CopyStatusType = "aborted"
	// CopyStatusFailed ...
	CopyStatusFailed CopyStatusType = "failed"
	// CopyStatusNone represents an empty CopyStatusType.
	CopyStatusNone CopyStatusType = ""
	// CopyStatusPending ...
	CopyStatusPending CopyStatusType = "pending"
	// CopyStatusSuccess ...
	CopyStatusSuccess CopyStatusType = "success"
)

// DeleteSnapshotsOptionType enumerates the values for delete snapshots option type.
type DeleteSnapshotsOptionType string

const (
	// DeleteSnapshotsOptionInclude ...
	DeleteSnapshotsOptionInclude DeleteSnapshotsOptionType = "include"
	// DeleteSnapshotsOptionNone represents an empty DeleteSnapshotsOptionType.
	DeleteSnapshotsOptionNone DeleteSnapshotsOptionType = ""
)

// FileRangeWriteType enumerates the values for file range write type.
type FileRangeWriteType string

const (
	// FileRangeWriteClear ...
	FileRangeWriteClear FileRangeWriteType = "clear"
	// FileRangeWriteNone represents an empty FileRangeWriteType.
	FileRangeWriteNone FileRangeWriteType = ""
	// FileRangeWriteUpdate ...
	FileRangeWriteUpdate FileRangeWriteType = "update"
)

// ListSharesIncludeType enumerates the values for list shares include type.
type ListSharesIncludeType string

const (
	// ListSharesIncludeMetadata ...
	ListSharesIncludeMetadata ListSharesIncludeType = "metadata"
	// ListSharesIncludeNone represents an empty ListSharesIncludeType.
	ListSharesIncludeNone ListSharesIncludeType = ""
	// ListSharesIncludeSnapshots ...
	ListSharesIncludeSnapshots ListSharesIncludeType = "snapshots"
)

// AccessPolicy - An Access policy.
type AccessPolicy struct {
	// Start - The date-time the policy is active.
	Start *time.Time `xml:"Start"`
	// Expiry - The date-time the policy expires.
	Expiry *time.Time `xml:"Expiry"`
	// Permission - The permissions for the ACL policy.
	Permission *string `xml:"Permission"`
}

// CorsRule - CORS is an HTTP feature that enables a web application running under one domain to access resources in
// another domain. Web browsers implement a security restriction known as same-origin policy that prevents a web page
// from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin domain) to call
// APIs in another domain.
type CorsRule struct {
	// AllowedOrigins - The origin domains that are permitted to make a request against the storage service via CORS. The origin domain is the domain from which the request originates. Note that the origin must be an exact case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*' to allow all origin domains to make requests via CORS.
	AllowedOrigins string `xml:"AllowedOrigins"`
	// AllowedMethods - The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated)
	AllowedMethods string `xml:"AllowedMethods"`
	// AllowedHeaders - The request headers that the origin domain may specify on the CORS request.
	AllowedHeaders string `xml:"AllowedHeaders"`
	// ExposedHeaders - The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer.
	ExposedHeaders string `xml:"ExposedHeaders"`
	// MaxAgeInSeconds - The maximum amount time that a browser should cache the preflight OPTIONS request.
	MaxAgeInSeconds int32 `xml:"MaxAgeInSeconds"`
}

// DirectoryCreateResponse ...
type DirectoryCreateResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (dcr DirectoryCreateResponse) Response() *http.Response {
	return dcr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dcr DirectoryCreateResponse) StatusCode() int {
	return dcr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dcr DirectoryCreateResponse) Status() string {
	return dcr.rawResponse.Status
}

// Date returns the value for header Date.
func (dcr DirectoryCreateResponse) Date() time.Time {
	s := dcr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (dcr DirectoryCreateResponse) ETag() ETag {
	return ETag(dcr.rawResponse.Header.Get("ETag"))
}

// IsServerEncrypted returns the value for header x-ms-request-server-encrypted.
func (dcr DirectoryCreateResponse) IsServerEncrypted() string {
	return dcr.rawResponse.Header.Get("x-ms-request-server-encrypted")
}

// LastModified returns the value for header Last-Modified.
func (dcr DirectoryCreateResponse) LastModified() time.Time {
	s := dcr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (dcr DirectoryCreateResponse) RequestID() string {
	return dcr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (dcr DirectoryCreateResponse) Version() string {
	return dcr.rawResponse.Header.Get("x-ms-version")
}

// DirectoryDeleteResponse ...
type DirectoryDeleteResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (ddr DirectoryDeleteResponse) Response() *http.Response {
	return ddr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ddr DirectoryDeleteResponse) StatusCode() int {
	return ddr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ddr DirectoryDeleteResponse) Status() string {
	return ddr.rawResponse.Status
}

// Date returns the value for header Date.
func (ddr DirectoryDeleteResponse) Date() time.Time {
	s := ddr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (ddr DirectoryDeleteResponse) RequestID() string {
	return ddr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (ddr DirectoryDeleteResponse) Version() string {
	return ddr.rawResponse.Header.Get("x-ms-version")
}

// DirectoryEntry - Directory entry.
type DirectoryEntry struct {
	// XMLName is used for marshalling and is subject to removal in a future release.
	XMLName   xml.Name `xml:"Directory"`
	EntryType string   `xml:"EntryType"`
	// Name - Name of the entry.
	Name string `xml:"Name"`
}

// DirectoryGetPropertiesResponse ...
type DirectoryGetPropertiesResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (dgpr DirectoryGetPropertiesResponse) Response() *http.Response {
	return dgpr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dgpr DirectoryGetPropertiesResponse) StatusCode() int {
	return dgpr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dgpr DirectoryGetPropertiesResponse) Status() string {
	return dgpr.rawResponse.Status
}

// Date returns the value for header Date.
func (dgpr DirectoryGetPropertiesResponse) Date() time.Time {
	s := dgpr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (dgpr DirectoryGetPropertiesResponse) ETag() ETag {
	return ETag(dgpr.rawResponse.Header.Get("ETag"))
}

// IsServerEncrypted returns the value for header x-ms-server-encrypted.
func (dgpr DirectoryGetPropertiesResponse) IsServerEncrypted() string {
	return dgpr.rawResponse.Header.Get("x-ms-server-encrypted")
}

// LastModified returns the value for header Last-Modified.
func (dgpr DirectoryGetPropertiesResponse) LastModified() time.Time {
	s := dgpr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (dgpr DirectoryGetPropertiesResponse) RequestID() string {
	return dgpr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (dgpr DirectoryGetPropertiesResponse) Version() string {
	return dgpr.rawResponse.Header.Get("x-ms-version")
}

// NewMetadata returns user-defined key/value pairs.
func (dgpr DirectoryGetPropertiesResponse) NewMetadata() Metadata {
	md := Metadata{}
	for k, v := range dgpr.rawResponse.Header {
		if len(k) > mdPrefixLen {
			if prefix := k[0:mdPrefixLen]; strings.EqualFold(prefix, mdPrefix) {
				md[strings.ToLower(k[mdPrefixLen:])] = v[0]
			}
		}
	}
	return md
}

// DirectorySetMetadataResponse ...
type DirectorySetMetadataResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (dsmr DirectorySetMetadataResponse) Response() *http.Response {
	return dsmr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dsmr DirectorySetMetadataResponse) StatusCode() int {
	return dsmr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dsmr DirectorySetMetadataResponse) Status() string {
	return dsmr.rawResponse.Status
}

// Date returns the value for header Date.
func (dsmr DirectorySetMetadataResponse) Date() time.Time {
	s := dsmr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (dsmr DirectorySetMetadataResponse) ETag() ETag {
	return ETag(dsmr.rawResponse.Header.Get("ETag"))
}

// IsServerEncrypted returns the value for header x-ms-request-server-encrypted.
func (dsmr DirectorySetMetadataResponse) IsServerEncrypted() string {
	return dsmr.rawResponse.Header.Get("x-ms-request-server-encrypted")
}

// RequestID returns the value for header x-ms-request-id.
func (dsmr DirectorySetMetadataResponse) RequestID() string {
	return dsmr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (dsmr DirectorySetMetadataResponse) Version() string {
	return dsmr.rawResponse.Header.Get("x-ms-version")
}

// downloadResponse ...
type downloadResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (dr downloadResponse) Response() *http.Response {
	return dr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dr downloadResponse) StatusCode() int {
	return dr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dr downloadResponse) Status() string {
	return dr.rawResponse.Status
}

// Body returns the raw HTTP response object's Body.
func (dr downloadResponse) Body() io.ReadCloser {
	return dr.rawResponse.Body
}

// AcceptRanges returns the value for header Accept-Ranges.
func (dr downloadResponse) AcceptRanges() string {
	return dr.rawResponse.Header.Get("Accept-Ranges")
}

// CacheControl returns the value for header Cache-Control.
func (dr downloadResponse) CacheControl() string {
	return dr.rawResponse.Header.Get("Cache-Control")
}

// ContentDisposition returns the value for header Content-Disposition.
func (dr downloadResponse) ContentDisposition() string {
	return dr.rawResponse.Header.Get("Content-Disposition")
}

// ContentEncoding returns the value for header Content-Encoding.
func (dr downloadResponse) ContentEncoding() string {
	return dr.rawResponse.Header.Get("Content-Encoding")
}

// ContentLanguage returns the value for header Content-Language.
func (dr downloadResponse) ContentLanguage() string {
	return dr.rawResponse.Header.Get("Content-Language")
}

// ContentLength returns the value for header Content-Length.
func (dr downloadResponse) ContentLength() int64 {
	s := dr.rawResponse.Header.Get("Content-Length")
	if s == "" {
		return -1
	}
	i, err := strconv.ParseInt(s, 10, 64)
	if err != nil {
		panic(err)
	}
	return i
}

// ContentMD5 returns the value for header Content-MD5.
// func (dr downloadResponse) ContentMD5() string {
// 	return dr.rawResponse.Header.Get("Content-MD5")
// }

// ContentRange returns the value for header Content-Range.
func (dr downloadResponse) ContentRange() string {
	return dr.rawResponse.Header.Get("Content-Range")
}

// ContentType returns the value for header Content-Type.
func (dr downloadResponse) ContentType() string {
	return dr.rawResponse.Header.Get("Content-Type")
}

// CopyCompletionTime returns the value for header x-ms-copy-completion-time.
func (dr downloadResponse) CopyCompletionTime() time.Time {
	s := dr.rawResponse.Header.Get("x-ms-copy-completion-time")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// CopyID returns the value for header x-ms-copy-id.
func (dr downloadResponse) CopyID() string {
	return dr.rawResponse.Header.Get("x-ms-copy-id")
}

// CopyProgress returns the value for header x-ms-copy-progress.
func (dr downloadResponse) CopyProgress() string {
	return dr.rawResponse.Header.Get("x-ms-copy-progress")
}

// CopySource returns the value for header x-ms-copy-source.
func (dr downloadResponse) CopySource() string {
	return dr.rawResponse.Header.Get("x-ms-copy-source")
}

// CopyStatus returns the value for header x-ms-copy-status.
func (dr downloadResponse) CopyStatus() CopyStatusType {
	return CopyStatusType(dr.rawResponse.Header.Get("x-ms-copy-status"))
}

// CopyStatusDescription returns the value for header x-ms-copy-status-description.
func (dr downloadResponse) CopyStatusDescription() string {
	return dr.rawResponse.Header.Get("x-ms-copy-status-description")
}

// Date returns the value for header Date.
func (dr downloadResponse) Date() time.Time {
	s := dr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (dr downloadResponse) ETag() ETag {
	return ETag(dr.rawResponse.Header.Get("ETag"))
}

// FileContentMD5 returns the value for header x-ms-content-md5.
// func (dr downloadResponse) FileContentMD5() string {
// 	return dr.rawResponse.Header.Get("x-ms-content-md5")
// }

// IsServerEncrypted returns the value for header x-ms-server-encrypted.
func (dr downloadResponse) IsServerEncrypted() string {
	return dr.rawResponse.Header.Get("x-ms-server-encrypted")
}

// LastModified returns the value for header Last-Modified.
func (dr downloadResponse) LastModified() time.Time {
	s := dr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (dr downloadResponse) RequestID() string {
	return dr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (dr downloadResponse) Version() string {
	return dr.rawResponse.Header.Get("x-ms-version")
}

// NewMetadata returns user-defined key/value pairs.
func (dr downloadResponse) NewMetadata() Metadata {
	md := Metadata{}
	for k, v := range dr.rawResponse.Header {
		if len(k) > mdPrefixLen {
			if prefix := k[0:mdPrefixLen]; strings.EqualFold(prefix, mdPrefix) {
				md[strings.ToLower(k[mdPrefixLen:])] = v[0]
			}
		}
	}
	return md
}

// Entry - Abstract for entries that can be listed from Directory.
type Entry struct {
	EntryType string `xml:"EntryType"`
	// Name - Name of the entry.
	Name string `xml:"Name"`
}

// FileAbortCopyResponse ...
type FileAbortCopyResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (facr FileAbortCopyResponse) Response() *http.Response {
	return facr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (facr FileAbortCopyResponse) StatusCode() int {
	return facr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (facr FileAbortCopyResponse) Status() string {
	return facr.rawResponse.Status
}

// Date returns the value for header Date.
func (facr FileAbortCopyResponse) Date() time.Time {
	s := facr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (facr FileAbortCopyResponse) RequestID() string {
	return facr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (facr FileAbortCopyResponse) Version() string {
	return facr.rawResponse.Header.Get("x-ms-version")
}

// FileCreateResponse ...
type FileCreateResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (fcr FileCreateResponse) Response() *http.Response {
	return fcr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fcr FileCreateResponse) StatusCode() int {
	return fcr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fcr FileCreateResponse) Status() string {
	return fcr.rawResponse.Status
}

// Date returns the value for header Date.
func (fcr FileCreateResponse) Date() time.Time {
	s := fcr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (fcr FileCreateResponse) ETag() ETag {
	return ETag(fcr.rawResponse.Header.Get("ETag"))
}

// IsServerEncrypted returns the value for header x-ms-request-server-encrypted.
func (fcr FileCreateResponse) IsServerEncrypted() string {
	return fcr.rawResponse.Header.Get("x-ms-request-server-encrypted")
}

// LastModified returns the value for header Last-Modified.
func (fcr FileCreateResponse) LastModified() time.Time {
	s := fcr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (fcr FileCreateResponse) RequestID() string {
	return fcr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (fcr FileCreateResponse) Version() string {
	return fcr.rawResponse.Header.Get("x-ms-version")
}

// FileDeleteResponse ...
type FileDeleteResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (fdr FileDeleteResponse) Response() *http.Response {
	return fdr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fdr FileDeleteResponse) StatusCode() int {
	return fdr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fdr FileDeleteResponse) Status() string {
	return fdr.rawResponse.Status
}

// Date returns the value for header Date.
func (fdr FileDeleteResponse) Date() time.Time {
	s := fdr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (fdr FileDeleteResponse) RequestID() string {
	return fdr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (fdr FileDeleteResponse) Version() string {
	return fdr.rawResponse.Header.Get("x-ms-version")
}

// FileEntry - File entry.
type FileEntry struct {
	// XMLName is used for marshalling and is subject to removal in a future release.
	XMLName   xml.Name `xml:"File"`
	EntryType string   `xml:"EntryType"`
	// Name - Name of the entry.
	Name       string        `xml:"Name"`
	Properties *FileProperty `xml:"Properties"`
}

// FileGetPropertiesResponse ...
type FileGetPropertiesResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (fgpr FileGetPropertiesResponse) Response() *http.Response {
	return fgpr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fgpr FileGetPropertiesResponse) StatusCode() int {
	return fgpr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fgpr FileGetPropertiesResponse) Status() string {
	return fgpr.rawResponse.Status
}

// CacheControl returns the value for header Cache-Control.
func (fgpr FileGetPropertiesResponse) CacheControl() string {
	return fgpr.rawResponse.Header.Get("Cache-Control")
}

// ContentDisposition returns the value for header Content-Disposition.
func (fgpr FileGetPropertiesResponse) ContentDisposition() string {
	return fgpr.rawResponse.Header.Get("Content-Disposition")
}

// ContentEncoding returns the value for header Content-Encoding.
func (fgpr FileGetPropertiesResponse) ContentEncoding() string {
	return fgpr.rawResponse.Header.Get("Content-Encoding")
}

// ContentLanguage returns the value for header Content-Language.
func (fgpr FileGetPropertiesResponse) ContentLanguage() string {
	return fgpr.rawResponse.Header.Get("Content-Language")
}

// ContentLength returns the value for header Content-Length.
func (fgpr FileGetPropertiesResponse) ContentLength() int64 {
	s := fgpr.rawResponse.Header.Get("Content-Length")
	if s == "" {
		return -1
	}
	i, err := strconv.ParseInt(s, 10, 64)
	if err != nil {
		panic(err)
	}
	return i
}

// ContentMD5 returns the value for header Content-MD5.
// func (fgpr FileGetPropertiesResponse) ContentMD5() string {
// 	return fgpr.rawResponse.Header.Get("Content-MD5")
// }

// ContentType returns the value for header Content-Type.
func (fgpr FileGetPropertiesResponse) ContentType() string {
	return fgpr.rawResponse.Header.Get("Content-Type")
}

// CopyCompletionTime returns the value for header x-ms-copy-completion-time.
func (fgpr FileGetPropertiesResponse) CopyCompletionTime() time.Time {
	s := fgpr.rawResponse.Header.Get("x-ms-copy-completion-time")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// CopyID returns the value for header x-ms-copy-id.
func (fgpr FileGetPropertiesResponse) CopyID() string {
	return fgpr.rawResponse.Header.Get("x-ms-copy-id")
}

// CopyProgress returns the value for header x-ms-copy-progress.
func (fgpr FileGetPropertiesResponse) CopyProgress() string {
	return fgpr.rawResponse.Header.Get("x-ms-copy-progress")
}

// CopySource returns the value for header x-ms-copy-source.
func (fgpr FileGetPropertiesResponse) CopySource() string {
	return fgpr.rawResponse.Header.Get("x-ms-copy-source")
}

// CopyStatus returns the value for header x-ms-copy-status.
func (fgpr FileGetPropertiesResponse) CopyStatus() CopyStatusType {
	return CopyStatusType(fgpr.rawResponse.Header.Get("x-ms-copy-status"))
}

// CopyStatusDescription returns the value for header x-ms-copy-status-description.
func (fgpr FileGetPropertiesResponse) CopyStatusDescription() string {
	return fgpr.rawResponse.Header.Get("x-ms-copy-status-description")
}

// Date returns the value for header Date.
func (fgpr FileGetPropertiesResponse) Date() time.Time {
	s := fgpr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (fgpr FileGetPropertiesResponse) ETag() ETag {
	return ETag(fgpr.rawResponse.Header.Get("ETag"))
}

// FileType returns the value for header x-ms-type.
func (fgpr FileGetPropertiesResponse) FileType() string {
	return string(fgpr.rawResponse.Header.Get("x-ms-type"))
}

// IsServerEncrypted returns the value for header x-ms-server-encrypted.
func (fgpr FileGetPropertiesResponse) IsServerEncrypted() string {
	return fgpr.rawResponse.Header.Get("x-ms-server-encrypted")
}

// LastModified returns the value for header Last-Modified.
func (fgpr FileGetPropertiesResponse) LastModified() time.Time {
	s := fgpr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (fgpr FileGetPropertiesResponse) RequestID() string {
	return fgpr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (fgpr FileGetPropertiesResponse) Version() string {
	return fgpr.rawResponse.Header.Get("x-ms-version")
}

// NewMetadata returns user-defined key/value pairs.
func (fgpr FileGetPropertiesResponse) NewMetadata() Metadata {
	md := Metadata{}
	for k, v := range fgpr.rawResponse.Header {
		if len(k) > mdPrefixLen {
			if prefix := k[0:mdPrefixLen]; strings.EqualFold(prefix, mdPrefix) {
				md[strings.ToLower(k[mdPrefixLen:])] = v[0]
			}
		}
	}
	return md
}

// FileProperty - File properties.
type FileProperty struct {
	// ContentLength - Content length of the file. This value may not be up-to-date since an SMB client may have modified the file locally. The value of Content-Length may not reflect that fact until the handle is closed or the op-lock is broken. To retrieve current property values, call Get File Properties.
	ContentLength int64 `xml:"Content-Length"`
}

// FileSetHTTPHeadersResponse ...
type FileSetHTTPHeadersResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (fshhr FileSetHTTPHeadersResponse) Response() *http.Response {
	return fshhr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fshhr FileSetHTTPHeadersResponse) StatusCode() int {
	return fshhr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fshhr FileSetHTTPHeadersResponse) Status() string {
	return fshhr.rawResponse.Status
}

// ContentMD5 returns the value for header Content-MD5.
// func (fprr FileUploadRangeResponse) ContentMD5() string {
// 	return fprr.rawResponse.Header.Get("Content-MD5")
// }

// Date returns the value for header Date.
func (fshhr FileSetHTTPHeadersResponse) Date() time.Time {
	s := fshhr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (fshhr FileSetHTTPHeadersResponse) ETag() ETag {
	return ETag(fshhr.rawResponse.Header.Get("ETag"))
}

// IsServerEncrypted returns the value for header x-ms-request-server-encrypted.
func (fshhr FileSetHTTPHeadersResponse) IsServerEncrypted() string {
	return fshhr.rawResponse.Header.Get("x-ms-request-server-encrypted")
}

// LastModified returns the value for header Last-Modified.
func (fshhr FileSetHTTPHeadersResponse) LastModified() time.Time {
	s := fshhr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (fshhr FileSetHTTPHeadersResponse) RequestID() string {
	return fshhr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (fshhr FileSetHTTPHeadersResponse) Version() string {
	return fshhr.rawResponse.Header.Get("x-ms-version")
}

// FileSetMetadataResponse ...
type FileSetMetadataResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (fsmr FileSetMetadataResponse) Response() *http.Response {
	return fsmr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fsmr FileSetMetadataResponse) StatusCode() int {
	return fsmr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fsmr FileSetMetadataResponse) Status() string {
	return fsmr.rawResponse.Status
}

// Date returns the value for header Date.
func (fsmr FileSetMetadataResponse) Date() time.Time {
	s := fsmr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (fsmr FileSetMetadataResponse) ETag() ETag {
	return ETag(fsmr.rawResponse.Header.Get("ETag"))
}

// IsServerEncrypted returns the value for header x-ms-request-server-encrypted.
func (fsmr FileSetMetadataResponse) IsServerEncrypted() string {
	return fsmr.rawResponse.Header.Get("x-ms-request-server-encrypted")
}

// RequestID returns the value for header x-ms-request-id.
func (fsmr FileSetMetadataResponse) RequestID() string {
	return fsmr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (fsmr FileSetMetadataResponse) Version() string {
	return fsmr.rawResponse.Header.Get("x-ms-version")
}

// FileStartCopyResponse ...
type FileStartCopyResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (fscr FileStartCopyResponse) Response() *http.Response {
	return fscr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fscr FileStartCopyResponse) StatusCode() int {
	return fscr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fscr FileStartCopyResponse) Status() string {
	return fscr.rawResponse.Status
}

// CopyID returns the value for header x-ms-copy-id.
func (fscr FileStartCopyResponse) CopyID() string {
	return fscr.rawResponse.Header.Get("x-ms-copy-id")
}

// CopyStatus returns the value for header x-ms-copy-status.
func (fscr FileStartCopyResponse) CopyStatus() CopyStatusType {
	return CopyStatusType(fscr.rawResponse.Header.Get("x-ms-copy-status"))
}

// Date returns the value for header Date.
func (fscr FileStartCopyResponse) Date() time.Time {
	s := fscr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (fscr FileStartCopyResponse) ETag() ETag {
	return ETag(fscr.rawResponse.Header.Get("ETag"))
}

// LastModified returns the value for header Last-Modified.
func (fscr FileStartCopyResponse) LastModified() time.Time {
	s := fscr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (fscr FileStartCopyResponse) RequestID() string {
	return fscr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (fscr FileStartCopyResponse) Version() string {
	return fscr.rawResponse.Header.Get("x-ms-version")
}

// FileUploadRangeResponse ...
type FileUploadRangeResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (furr FileUploadRangeResponse) Response() *http.Response {
	return furr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (furr FileUploadRangeResponse) StatusCode() int {
	return furr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (furr FileUploadRangeResponse) Status() string {
	return furr.rawResponse.Status
}

// ContentMD5 returns the value for header Content-MD5.
// func (gr downloadResponse) ContentMD5() string {
// 	return gr.rawResponse.Header.Get("Content-MD5")
// }

// ContentRange returns the value for header Content-Range.
// func (gr downloadResponse) ContentRange() string {
// 	return gr.rawResponse.Header.Get("Content-Range")
// }

// IsServerEncrypted returns the value for header x-ms-request-server-encrypted.
func (furr FileUploadRangeResponse) IsServerEncrypted() string {
	return furr.rawResponse.Header.Get("x-ms-request-server-encrypted")
}

// Date returns the value for header Date.
func (furr FileUploadRangeResponse) Date() time.Time {
	s := furr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (furr FileUploadRangeResponse) ETag() ETag {
	return ETag(furr.rawResponse.Header.Get("ETag"))
}

// LastModified returns the value for header Last-Modified.
func (furr FileUploadRangeResponse) LastModified() time.Time {
	s := furr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (furr FileUploadRangeResponse) RequestID() string {
	return furr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (furr FileUploadRangeResponse) Version() string {
	return furr.rawResponse.Header.Get("x-ms-version")
}

// ListFilesAndDirectoriesSegmentResponse - An enumeration of directories and files.
type ListFilesAndDirectoriesSegmentResponse struct {
	rawResponse *http.Response
	// XMLName is used for marshalling and is subject to removal in a future release.
	XMLName         xml.Name         `xml:"EnumerationResults"`
	ServiceEndpoint string           `xml:"ServiceEndpoint,attr"`
	ShareName       string           `xml:"ShareName,attr"`
	ShareSnapshot   *string          `xml:"ShareSnapshot,attr"`
	DirectoryPath   string           `xml:"DirectoryPath,attr"`
	Prefix          string           `xml:"Prefix"`
	Marker          *string          `xml:"Marker"`
	MaxResults      *int32           `xml:"MaxResults"`
	Files           []FileEntry      `xml:"Entries>File"`
	Directories     []DirectoryEntry `xml:"Entries>Directory"`
	NextMarker      Marker           `xml:"NextMarker"`
}

// Response returns the raw HTTP response object.
func (ldafr ListFilesAndDirectoriesSegmentResponse) Response() *http.Response {
	return ldafr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ldafr ListFilesAndDirectoriesSegmentResponse) StatusCode() int {
	return ldafr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ldafr ListFilesAndDirectoriesSegmentResponse) Status() string {
	return ldafr.rawResponse.Status
}

// ContentType returns the value for header Content-Type.
func (ldafr ListFilesAndDirectoriesSegmentResponse) ContentType() string {
	return ldafr.rawResponse.Header.Get("Content-Type")
}

// Date returns the value for header Date.
func (ldafr ListFilesAndDirectoriesSegmentResponse) Date() time.Time {
	s := ldafr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (ldafr ListFilesAndDirectoriesSegmentResponse) RequestID() string {
	return ldafr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (ldafr ListFilesAndDirectoriesSegmentResponse) Version() string {
	return ldafr.rawResponse.Header.Get("x-ms-version")
}

// ListSharesResponse - An enumeration of shares.
type ListSharesResponse struct {
	rawResponse *http.Response
	// XMLName is used for marshalling and is subject to removal in a future release.
	XMLName         xml.Name `xml:"EnumerationResults"`
	ServiceEndpoint string   `xml:"ServiceEndpoint,attr"`
	Prefix          *string  `xml:"Prefix"`
	Marker          *string  `xml:"Marker"`
	MaxResults      *int32   `xml:"MaxResults"`
	Shares          []Share  `xml:"Shares>Share"`
	NextMarker      Marker   `xml:"NextMarker"`
}

// Response returns the raw HTTP response object.
func (lsr ListSharesResponse) Response() *http.Response {
	return lsr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (lsr ListSharesResponse) StatusCode() int {
	return lsr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (lsr ListSharesResponse) Status() string {
	return lsr.rawResponse.Status
}

// RequestID returns the value for header x-ms-request-id.
func (lsr ListSharesResponse) RequestID() string {
	return lsr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (lsr ListSharesResponse) Version() string {
	return lsr.rawResponse.Header.Get("x-ms-version")
}

// Metrics - Storage Analytics metrics for file service.
type Metrics struct {
	// Version - The version of Storage Analytics to configure.
	Version string `xml:"Version"` // TODO: this is actually mandatory
	// Enabled - Indicates whether metrics are enabled for the File service.
	Enabled bool `xml:"Enabled"`
	// IncludeAPIs - Indicates whether metrics should generate summary statistics for called API operations.
	IncludeAPIs     *bool            `xml:"IncludeAPIs"`
	RetentionPolicy *RetentionPolicy `xml:"RetentionPolicy"` // TODO: this is actually manadatory
}

// MetricProperties definies convenience struct for Metrics,
type MetricProperties struct {
	// MetricEnabled - Indicates whether metrics are enabled for the File service.
	MetricEnabled bool
	// Version - The version of Storage Analytics to configure.
	// Version string, comment out version, as it's mandatory and should be 1.0
	// IncludeAPIs - Indicates whether metrics should generate summary statistics for called API operations.
	IncludeAPIs bool
	// RetentionPolicyEnabled - Indicates whether a rentention policy is enabled for the File service.
	RetentionPolicyEnabled bool
	// RetentionDays - Indicates the number of days that metrics data should be retained.
	RetentionDays int32
}

// Range - An Azure Storage file range.
type Range struct {
	// Start - Start of the range.
	Start int64 `xml:"Start"`
	// End - End of the range.
	End int64 `xml:"End"`
}

// Ranges ...
type Ranges struct {
	rawResponse *http.Response
	Value       []Range `xml:"Range"`
}

// Response returns the raw HTTP response object.
func (r Ranges) Response() *http.Response {
	return r.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (r Ranges) StatusCode() int {
	return r.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (r Ranges) Status() string {
	return r.rawResponse.Status
}

// Date returns the value for header Date.
func (r Ranges) Date() time.Time {
	s := r.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (r Ranges) ETag() ETag {
	return ETag(r.rawResponse.Header.Get("ETag"))
}

// FileContentLength returns the value for header x-ms-content-length.
func (r Ranges) FileContentLength() int64 {
	s := r.rawResponse.Header.Get("x-ms-content-length")
	if s == "" {
		return -1
	}
	i, err := strconv.ParseInt(s, 10, 64)
	if err != nil {
		panic(err)
	}
	return i
}

// LastModified returns the value for header Last-Modified.
func (r Ranges) LastModified() time.Time {
	s := r.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (r Ranges) RequestID() string {
	return r.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (r Ranges) Version() string {
	return r.rawResponse.Header.Get("x-ms-version")
}

// RetentionPolicy - The retention policy.
type RetentionPolicy struct {
	// Enabled - Indicates whether a retention policy is enabled for the File service. If false, metrics data is retained, and the user is responsible for deleting it.
	Enabled bool `xml:"Enabled"`
	// Days - Indicates the number of days that metrics data should be retained. All data older than this value will be deleted. Metrics data is deleted on a best-effort basis after the retention period expires.
	Days *int32 `xml:"Days"`
}

// ServiceSetPropertiesResponse ...
type ServiceSetPropertiesResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (sspr ServiceSetPropertiesResponse) Response() *http.Response {
	return sspr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sspr ServiceSetPropertiesResponse) StatusCode() int {
	return sspr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sspr ServiceSetPropertiesResponse) Status() string {
	return sspr.rawResponse.Status
}

// RequestID returns the value for header x-ms-request-id.
func (sspr ServiceSetPropertiesResponse) RequestID() string {
	return sspr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (sspr ServiceSetPropertiesResponse) Version() string {
	return sspr.rawResponse.Header.Get("x-ms-version")
}

// Share - An Azure Storage share.
type Share struct {
	Name       string          `xml:"Name"`
	Snapshot   *string         `xml:"Snapshot"`
	Properties ShareProperties `xml:"Properties"`
	Metadata   Metadata        `xml:"Metadata"`
}

// ShareCreateResponse ...
type ShareCreateResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (scr ShareCreateResponse) Response() *http.Response {
	return scr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (scr ShareCreateResponse) StatusCode() int {
	return scr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (scr ShareCreateResponse) Status() string {
	return scr.rawResponse.Status
}

// Date returns the value for header Date.
func (scr ShareCreateResponse) Date() time.Time {
	s := scr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (scr ShareCreateResponse) ETag() ETag {
	return ETag(scr.rawResponse.Header.Get("ETag"))
}

// LastModified returns the value for header Last-Modified.
func (scr ShareCreateResponse) LastModified() time.Time {
	s := scr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (scr ShareCreateResponse) RequestID() string {
	return scr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (scr ShareCreateResponse) Version() string {
	return scr.rawResponse.Header.Get("x-ms-version")
}

// ShareCreateSnapshotResponse ...
type ShareCreateSnapshotResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (scsr ShareCreateSnapshotResponse) Response() *http.Response {
	return scsr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (scsr ShareCreateSnapshotResponse) StatusCode() int {
	return scsr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (scsr ShareCreateSnapshotResponse) Status() string {
	return scsr.rawResponse.Status
}

// Date returns the value for header Date.
func (scsr ShareCreateSnapshotResponse) Date() time.Time {
	s := scsr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (scsr ShareCreateSnapshotResponse) ETag() ETag {
	return ETag(scsr.rawResponse.Header.Get("ETag"))
}

// LastModified returns the value for header Last-Modified.
func (scsr ShareCreateSnapshotResponse) LastModified() time.Time {
	s := scsr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (scsr ShareCreateSnapshotResponse) RequestID() string {
	return scsr.rawResponse.Header.Get("x-ms-request-id")
}

// Snapshot returns the value for header x-ms-snapshot.
func (scsr ShareCreateSnapshotResponse) Snapshot() string {
	return scsr.rawResponse.Header.Get("x-ms-snapshot")
}

// Version returns the value for header x-ms-version.
func (scsr ShareCreateSnapshotResponse) Version() string {
	return scsr.rawResponse.Header.Get("x-ms-version")
}

// ShareDeleteResponse ...
type ShareDeleteResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (sdr ShareDeleteResponse) Response() *http.Response {
	return sdr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sdr ShareDeleteResponse) StatusCode() int {
	return sdr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sdr ShareDeleteResponse) Status() string {
	return sdr.rawResponse.Status
}

// Date returns the value for header Date.
func (sdr ShareDeleteResponse) Date() time.Time {
	s := sdr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (sdr ShareDeleteResponse) RequestID() string {
	return sdr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (sdr ShareDeleteResponse) Version() string {
	return sdr.rawResponse.Header.Get("x-ms-version")
}

// ShareGetPropertiesResponse ...
type ShareGetPropertiesResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (sgpr ShareGetPropertiesResponse) Response() *http.Response {
	return sgpr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sgpr ShareGetPropertiesResponse) StatusCode() int {
	return sgpr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sgpr ShareGetPropertiesResponse) Status() string {
	return sgpr.rawResponse.Status
}

// Date returns the value for header Date.
func (sgpr ShareGetPropertiesResponse) Date() time.Time {
	s := sgpr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (sgpr ShareGetPropertiesResponse) ETag() ETag {
	return ETag(sgpr.rawResponse.Header.Get("ETag"))
}

// LastModified returns the value for header Last-Modified.
func (sgpr ShareGetPropertiesResponse) LastModified() time.Time {
	s := sgpr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// Quota returns the value for header x-ms-share-quota.
func (sgpr ShareGetPropertiesResponse) Quota() int32 {
	s := sgpr.rawResponse.Header.Get("x-ms-share-quota")
	if s == "" {
		return -1
	}
	i, err := strconv.ParseInt(s, 10, 32)
	if err != nil {
		panic(err)
	}
	return int32(i)
}

// RequestID returns the value for header x-ms-request-id.
func (sgpr ShareGetPropertiesResponse) RequestID() string {
	return sgpr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (sgpr ShareGetPropertiesResponse) Version() string {
	return sgpr.rawResponse.Header.Get("x-ms-version")
}

// NewMetadata returns user-defined key/value pairs.
func (sgpr ShareGetPropertiesResponse) NewMetadata() Metadata {
	md := Metadata{}
	for k, v := range sgpr.rawResponse.Header {
		if len(k) > mdPrefixLen {
			if prefix := k[0:mdPrefixLen]; strings.EqualFold(prefix, mdPrefix) {
				md[strings.ToLower(k[mdPrefixLen:])] = v[0]
			}
		}
	}
	return md
}

// ShareProperties - Properties of a share.
type ShareProperties struct {
	LastModified time.Time `xml:"Last-Modified"`
	Etag         ETag      `xml:"Etag"`
	Quota        int32     `xml:"Quota"`
}

// ShareSetAccessPolicyResponse ...
type ShareSetAccessPolicyResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (ssapr ShareSetAccessPolicyResponse) Response() *http.Response {
	return ssapr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ssapr ShareSetAccessPolicyResponse) StatusCode() int {
	return ssapr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ssapr ShareSetAccessPolicyResponse) Status() string {
	return ssapr.rawResponse.Status
}

// Date returns the value for header Date.
func (ssapr ShareSetAccessPolicyResponse) Date() time.Time {
	s := ssapr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (ssapr ShareSetAccessPolicyResponse) ETag() ETag {
	return ETag(ssapr.rawResponse.Header.Get("ETag"))
}

// LastModified returns the value for header Last-Modified.
func (ssapr ShareSetAccessPolicyResponse) LastModified() time.Time {
	s := ssapr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (ssapr ShareSetAccessPolicyResponse) RequestID() string {
	return ssapr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (ssapr ShareSetAccessPolicyResponse) Version() string {
	return ssapr.rawResponse.Header.Get("x-ms-version")
}

// ShareSetMetadataResponse ...
type ShareSetMetadataResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (ssmr ShareSetMetadataResponse) Response() *http.Response {
	return ssmr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ssmr ShareSetMetadataResponse) StatusCode() int {
	return ssmr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ssmr ShareSetMetadataResponse) Status() string {
	return ssmr.rawResponse.Status
}

// Date returns the value for header Date.
func (ssmr ShareSetMetadataResponse) Date() time.Time {
	s := ssmr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (ssmr ShareSetMetadataResponse) ETag() ETag {
	return ETag(ssmr.rawResponse.Header.Get("ETag"))
}

// LastModified returns the value for header Last-Modified.
func (ssmr ShareSetMetadataResponse) LastModified() time.Time {
	s := ssmr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (ssmr ShareSetMetadataResponse) RequestID() string {
	return ssmr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (ssmr ShareSetMetadataResponse) Version() string {
	return ssmr.rawResponse.Header.Get("x-ms-version")
}

// ShareSetQuotaResponse ...
type ShareSetQuotaResponse struct {
	rawResponse *http.Response
}

// Response returns the raw HTTP response object.
func (ssqr ShareSetQuotaResponse) Response() *http.Response {
	return ssqr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ssqr ShareSetQuotaResponse) StatusCode() int {
	return ssqr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ssqr ShareSetQuotaResponse) Status() string {
	return ssqr.rawResponse.Status
}

// Date returns the value for header Date.
func (ssqr ShareSetQuotaResponse) Date() time.Time {
	s := ssqr.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (ssqr ShareSetQuotaResponse) ETag() ETag {
	return ETag(ssqr.rawResponse.Header.Get("ETag"))
}

// LastModified returns the value for header Last-Modified.
func (ssqr ShareSetQuotaResponse) LastModified() time.Time {
	s := ssqr.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (ssqr ShareSetQuotaResponse) RequestID() string {
	return ssqr.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (ssqr ShareSetQuotaResponse) Version() string {
	return ssqr.rawResponse.Header.Get("x-ms-version")
}

// ShareStats - Stats for the share.
type ShareStats struct {
	rawResponse *http.Response
	// ShareUsage - The approximate size of the data stored on the share, rounded up to the nearest gigabyte. Note that this value may not include all recently created or recently resized files.
	ShareUsage int32 `xml:"ShareUsage"`
}

// Response returns the raw HTTP response object.
func (ss ShareStats) Response() *http.Response {
	return ss.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ss ShareStats) StatusCode() int {
	return ss.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ss ShareStats) Status() string {
	return ss.rawResponse.Status
}

// Date returns the value for header Date.
func (ss ShareStats) Date() time.Time {
	s := ss.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (ss ShareStats) ETag() ETag {
	return ETag(ss.rawResponse.Header.Get("ETag"))
}

// LastModified returns the value for header Last-Modified.
func (ss ShareStats) LastModified() time.Time {
	s := ss.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (ss ShareStats) RequestID() string {
	return ss.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (ss ShareStats) Version() string {
	return ss.rawResponse.Header.Get("x-ms-version")
}

// SignedIdentifier - Signed identifier.
type SignedIdentifier struct {
	// ID - A unique id.
	ID string `xml:"Id"`
	// AccessPolicy - The access policy.
	AccessPolicy *AccessPolicy `xml:"AccessPolicy"`
}

// SignedIdentifiers ...
type SignedIdentifiers struct {
	rawResponse *http.Response
	Value       []SignedIdentifier `xml:"SignedIdentifier"`
}

// Response returns the raw HTTP response object.
func (si SignedIdentifiers) Response() *http.Response {
	return si.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (si SignedIdentifiers) StatusCode() int {
	return si.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (si SignedIdentifiers) Status() string {
	return si.rawResponse.Status
}

// Date returns the value for header Date.
func (si SignedIdentifiers) Date() time.Time {
	s := si.rawResponse.Header.Get("Date")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// ETag returns the value for header ETag.
func (si SignedIdentifiers) ETag() ETag {
	return ETag(si.rawResponse.Header.Get("ETag"))
}

// LastModified returns the value for header Last-Modified.
func (si SignedIdentifiers) LastModified() time.Time {
	s := si.rawResponse.Header.Get("Last-Modified")
	if s == "" {
		return time.Time{}
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		panic(err)
	}
	return t
}

// RequestID returns the value for header x-ms-request-id.
func (si SignedIdentifiers) RequestID() string {
	return si.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (si SignedIdentifiers) Version() string {
	return si.rawResponse.Header.Get("x-ms-version")
}

// StorageServiceProperties - Storage service properties.
type StorageServiceProperties struct {
	rawResponse *http.Response
	// HourMetrics - A summary of request statistics grouped by API in hourly aggregates for files.
	HourMetrics *Metrics `xml:"HourMetrics"`
	// MinuteMetrics - A summary of request statistics grouped by API in minute aggregates for files.
	MinuteMetrics *Metrics `xml:"MinuteMetrics"`
	// Cors - The set of CORS rules.
	Cors []CorsRule `xml:"Cors>CorsRule"`
}

// Response returns the raw HTTP response object.
func (ssp StorageServiceProperties) Response() *http.Response {
	return ssp.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ssp StorageServiceProperties) StatusCode() int {
	return ssp.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ssp StorageServiceProperties) Status() string {
	return ssp.rawResponse.Status
}

// RequestID returns the value for header x-ms-request-id.
func (ssp StorageServiceProperties) RequestID() string {
	return ssp.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (ssp StorageServiceProperties) Version() string {
	return ssp.rawResponse.Header.Get("x-ms-version")
}

// FileServiceProperties defines convenience struct for StorageServiceProperties
type FileServiceProperties struct {
	rawResponse *http.Response
	// HourMetrics - A summary of request statistics grouped by API in hourly aggregates for files.
	HourMetrics MetricProperties
	// MinuteMetrics - A summary of request statistics grouped by API in minute aggregates for files.
	MinuteMetrics MetricProperties
	// Cors - The set of CORS rules.
	Cors []CorsRule
}

// Response returns the raw HTTP response object.
func (fsp FileServiceProperties) Response() *http.Response {
	return fsp.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fsp FileServiceProperties) StatusCode() int {
	return fsp.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fsp FileServiceProperties) Status() string {
	return fsp.rawResponse.Status
}

// RequestID returns the value for header x-ms-request-id.
func (fsp FileServiceProperties) RequestID() string {
	return fsp.rawResponse.Header.Get("x-ms-request-id")
}

// Version returns the value for header x-ms-version.
func (fsp FileServiceProperties) Version() string {
	return fsp.rawResponse.Header.Get("x-ms-version")
}
